pragma solidity 0.8.19;

import "forge-std/Test.sol";
import "src/DexTwo.sol";
import "src/Exploit.sol";

contract TestExploit is Test {
    function test_exploit() public {
        DexTwo d = new DexTwo();
        SwappableTokenTwo token1 = new SwappableTokenTwo(address(d), "token1", "T1", 110);
        SwappableTokenTwo token2 = new SwappableTokenTwo(address(d), "token2", "T2", 110);

        d.setTokens(address(token1), address(token2));
        token1.approve(address(d), 100);
        token2.approve(address(d), 100);
        d.add_liquidity(address(token1), 100);
        d.add_liquidity(address(token2), 100);

        new Exploit(address(d));

        uint256 dexToken1Balance = token1.balanceOf(address(d));
        uint256 dexToken2Balance = token2.balanceOf(address(d));
        assertEq(dexToken1Balance, 0);
        assertEq(dexToken2Balance, 0);
   }
}
